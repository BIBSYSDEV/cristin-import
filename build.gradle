plugins {
    id 'java-library'
    id 'jacoco'
    id 'base'
    id 'checkstyle'
    id 'pmd'
    id 'nebula.lint' version '16.17.0'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    jcenter()
}

wrapper{
    gradleVersion= "6.8"
}

group = 'com.github.bibsysdev'
version = '0.1.1'


project.ext{
    nvaCommonsVersion = "1.5.2"
    awsSdkVersion ="1.11.979"
}

def jupiterVersion = "5.6.0"
dependencies {


    implementation group: 'com.github.bibsysdev', name: 'lambdaauthorizer', version: '1.5.2'
    implementation group: 'com.github.bibsysdev', name: 'core', version: '1.5.2'
    implementation group: 'com.github.bibsysdev', name: 'apigateway', version: '1.5.2'
    implementation group: 'com.github.bibsysdev', name: 'secrets', version: '1.5.2'


    implementation (group: 'com.amazonaws', name: 'aws-java-sdk-secretsmanager', version: project.ext.awsSdkVersion)

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jupiterVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

}

test {
    useJUnitPlatform()
    failFast = true
    testLogging {
        events 'skipped', 'passed', 'failed'
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

// jacoco configuration
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
    }
}

gradleLint {
    rules  = ['all-dependency','duplicate-dependency-class']
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = project.name
                description = 'A commons library for the NVA project'
                url = 'https://github.com/BIBSYSDEV/nva-commons'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        name = 'Mattias HÃ¥heim Johnsen'
                        email = 'mattias.haheim.johnsen@unit.no'
                        organization = 'UNIT'
                        organizationUrl = 'https://www.unit.no/'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/BIBSYSDEV/nva-commons.git'
                    developerConnection = 'scm:git:ssh://github.com/BIBSYSDEV/nva-commons.git'
                    url = 'https://github.com/BIBSYSDEV/nva-commons/tree/main'
                }
            }
        }
    }
}

signing {
    if (isMainBranch()) {
        useInMemoryPgpKeys(findProperty("signingKey"), findProperty("signingPassword"))
        sign publishing.publications.mavenJava
    }

}


def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

boolean isMainBranch() {
    def branch = gitBranch()
    return ((branch == "master" || branch == "main"))
}
