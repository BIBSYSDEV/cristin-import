plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id "nebula.lint" version "16.9.0"

}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
    mavenCentral()
}

wrapper{
    gradleVersion= "6.8"
}


project.ext{
    nvaCommonsVersion = "1.5.4"
    awsSdkVersion = "1.11.979"
    awsSkd2Version= "2.16.24"
}

def jupiterVersion = "5.6.0"
dependencies {


    implementation group: 'com.github.bibsysdev', name: 'lambdaauthorizer', version: project.ext.nvaCommonsVersion
    implementation group: 'com.github.bibsysdev', name: 'core', version: project.ext.nvaCommonsVersion
    implementation group: 'com.github.bibsysdev', name: 'apigateway', version: project.ext.nvaCommonsVersion
    implementation group: 'com.github.bibsysdev', name: 'secrets', version: project.ext.nvaCommonsVersion
    implementation group: 'com.github.bibsysdev', name: 's3', version: project.ext.nvaCommonsVersion


    implementation group: 'software.amazon.awssdk', name: 's3', version: project.ext.awsSkd2Version
    implementation group: 'software.amazon.awssdk', name: 'sdk-core', version: project.ext.awsSkd2Version
    testImplementation group: 'software.amazon.awssdk', name: 'http-client-spi', version: project.ext.awsSkd2Version


    implementation (group: 'com.amazonaws', name: 'aws-java-sdk-secretsmanager', version: project.ext.awsSdkVersion)

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jupiterVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.8.0'
    testImplementation group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'

}

test {
    useJUnitPlatform()
    failFast = true
    testLogging {
        events 'skipped', 'passed', 'failed'
    }
    finalizedBy jacocoTestReport
    environment("AWS_ACCESS_KEY_ID",System.getenv("ACCESS_KEY"))
    environment("AWS_SECRET_ACCESS_KEY",System.getenv("SECRET_KEY"))
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

// jacoco configuration
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
    }
}

gradleLint {
    rules  = ['all-dependency','duplicate-dependency-class']
}